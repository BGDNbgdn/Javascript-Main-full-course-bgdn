console.log(typeof true);
// Gives the type of a variable


firstname = "Bogdan";
const jonasnew = `I'm ${firstname}, i am 20 yo`;
// Use `` saves time, no need to use operators for strings, and dont bother with spaces. 

\n\ to skip to the next line or just use `` and enter


/* 5 falsy values : 0, '', undefined, null, NaN +(false) all of them become false when converted to boolean. Any other value will be ocnverted to true.
For example 
const money = 0 
if (money){
    console.log('hello')
} else {
    console.log('this will be console logged since money = 0 = false')
}
*/

/* loose equality operator '18' == 18 will return true, while '18' === 18 returns false 
const favourite = Number(prompt("what's your fav number ? "));

console.log(favourite);
console.log(typeof favourite);

if (favourite === 23) {
	console.log("cool 23 is great");
}


!== operator for not equal
 */


//Logic operators : 
&& for AND 
|| for OR
! for Opposit


//THE SWITCH STATEMENT,  allows to write faster than if,  else if, else...

const day = 'monday'

switch(day){
    case 'monday':
        console.log('this will print out if monday, use break otherwise it will just go on and on')
        break
    case 'tuesday':
    case 'wednesday':
        console.log('this will printout if tuesday or wednesday')
    case 'thursday....'
}

//CONDITIONAL (TERNARY) OPERATOR
const age = 23
const drink = age >= 18 ? 'wine' : 'water'

console.log(I like to drink ${age >= 18 ? 'wine' : 'water'})


// to avoid hidden erors write this on the first line of every js file 
'use strict'



//////FUNCTIONS FUNCTIONS FUNCTIONS FUNCTIONS FUNCTIONS FUNCTIONS FUNCTIONS FUNCTIONS//////

//CREATE A FUNCTION (this way you can call this function even before declaring it)
function logger(name) {
	return `Hello ${name}`;
}
const sentence = logger("Bogdan");
console.log(sentence);

//FUNCTION EXPRESSION (need to store it in variable since it produce a value) (cannont call it before defining it)
const calcAge = function (birthyear) {
    return 2037 - birthyear;
}
const age = calcAge(1991);
console.log(age);

//ARROW FUNCTION (also expression function), (use parantheses for multiple parameters)
const calcage2 = birthyear => 2037 - birthyear;
const age2 = calcage2(1991)
console.log(age2)

// 3 types tgether 


function calcAge(birthyear){
    return 2037 - birthyear;
}


 const calcAge = function (birthyear){
    return 2037 - birthyear;
 }


 const calcAge = birthyear => 2037 - birthyear;



////// ARRAYS ARRAYS ARRAYS ARRAYS ARRAYS ARRAYS ARRAYS ARRAYS ARRAYS ARRAYS ARRAYS ARRAYS //////

const numbers = [1,2,3,4] 

const years = new Array(1,2,3,4); //creation of new array using function

const length = years.length // get the length of an array

//ARRAY METHODS

years.push(2024)  // adds an element to the array 
years.unshift(1995) // adds an element at the beggining of the array
years.pop() // removes the last element of an array
years.shift() // removes the first element of an array

years.indexOf(2024) // returns the index of the searched element, if not, returns -1 

years.includes(2024) // returns a bollean value 


//////OBJECTS OBJECTS OBJECTS OBJECTS OBJECTS OBJECTS OBJECTS OBJECTS OBJECTS OBJECTS //////

const jonas = {
    firstname : 'jonas'
    lastname : 'shemd'
    age : 2037-1991
    job : 'teacher'
}

jonas.lastname //returns shemd, the value of the key
jonas['lastname'] // returns shemd, but to be used in functions since you can insert into [  ]  for example :
const nameKey = 'Name'
console.log(jonas['first'+nameKey])

jonas.location = 'Portugal'; // adding new keys/values to the object
jonas['location2'] = 'France'; // adding new keys/values to the object



const jonas = {
    firstname : 'Jonas',
    lastname : 'Shmed',
    calcAge : function (birthyear){
        return 2037-birthyear
    }
};
console.log(jonas.calcAge(1991)); // dot method
console.log(jonas["calcAge"](1991)); //bracket method

//in the next example we use this that references the object itself 
const jonas = {
    firstname : 'Jonas',
    lastname : 'Shmed',
    birthyear : '1991',
    calcAge : function (){
        console.log(this) // just to see the objec, no need to write
        return 2037 - this.birthyear //this applies to jonas object  === this
    }
};
console.log(jonas.calcAge()); 

//here we will store the result of a function inside of a keyword age
const jonas = {
    firstname : 'Jonas',
    lastname : 'Shmed',
    birthyear : '1991',

    calcAge : function (){ // function that calculates the age
        
        this.age =  2037 - this.birthyear //calculating the age and storing it in this.age
        
        return this.age
    }
};
console.log(jonas.calcAge()); // when we call the function, the keyword age is created with its value, otherwise it doenst exist



//////LOOPS LOOPS LOOPS LOOPS LOOPS LOOPS LOOPS LOOPS LOOPS LOOPS //////

//FOR LOOP 

//loop that goes from 1 to 10
for (let rep = 1; rep <= 10; rep++) {
	console.log(rep);
} 

for(let i = 0 ; i < years.length ;i++) // tip : no need to use -1 since we use smaller operator

//CONTINUE

for (let rep = 1; rep <= 10; rep++) {
	if (rep === 3) continue;
	console.log(rep);
}

//BREAK
for (let rep = 1; rep <= 10; rep++) {
	if (rep === 3) break;
	console.log(rep);
}

//LOOPING BACKWARDS

for (let i = myarray.length - 1; i>=0; i--){
    console.log(i)
}

//WHILE LOOP

let rep = 1 //should create it outside and before the loop
while (rep <= 10){
    console.log(rep);
}





// DEBUGGING TOOLS 

console.log(measurement.value);
console.warn(measurement.value); //yellow in console
console.error(measurement.value); //red in console

// to use the debugger, go to browser, inspect element, and sources, use break points

debugger; // creates a break point in the script 






//// DOM MANIPULATION



document.querySelector('.message').textContent = ' Hello' // select a query, more precisely its text content and modify it

document.querySelector('.guess').value = 10; // to access a person inseted value

document.querySelector('.check').addEventListener('click', function () {
    console.log(document.querySelector('.guess').value);
  }); // we select an elen=ment (check button), and add an event listener to it, the click event. and we created an event handler (the function). When the button is clicked the function takes the vlaue from the .guess claass field
  
  document.querySelector('body').style.backgroundColor = '#60b347' //we select the stlye (CSS) of the body element .backColor is the attribute in CSS (use camelCase when you see a -)

// replace a query with a function 
  document.querySelector('.message').textContent = ' No number'; //this is the basic code

  const displayMessage = function (message) {
    document.querySelector('.message').textContent = message;
  }; //but we can make a function that takes as argument the value to display for example

displayMessage('No number'); // so when called it will display No number

 // use querySelectorALL to select all isntances of a class, otherwise the code selects only the first instance, we can even iterate this one. USE THIS TO ADD EVENT LISTENERS TO QUELRYSELECTOR ALL
const btnsOpenModal = document.querySelectorAll('.show-modal');

for (let i = 0; i < btnsOpenModal.length; i++)
  btnsOpenModal[i].addEventListener('click', function () {
    console.log('button clicked');
  });


//
btnsOpenModal.classList.remove('hidden') //classList (lets add remove etc classes) !!!! no need to use . before the class, the . is used only to select

player0El.classList.toggle('player--active'); //.toggle turns on.off a class from the classList of an element

diceEl.src = `dice-${dice}.png`; // .src access the source of a query in html, we can set it to smth else., you can use ${} to insert different values into the link to the source




const closeModal = function () {
    modal.classList.add('hidden');
    overlay.classList.add('hidden');
  };
  
  btnCloseModal.addEventListener('click', closeModal); // we used closeModal without () because this lets js know that we want to execute it only once the button is clicked, using () directly will just call the function directly



  document.addEventListener('keydown', function (e) {
    if (e.key === 'Escape') {
      if (!modal.classList.contains('hidden')) {
        closeModal();
      }
    }
// when using keydown or any other key related event, the function(e) will return the key pressed class, use .key to get the key.

const score0 = document.querySelector('#score--0') // you can select an id with the basic query selector
const score1 = document.getElementById('score--1') //but you can also use selector by id which is faster 


//SEE 07-PIG-GAME STARTER JS CODE, a lot of good logic



//MATH RANDOM
const number = Math.trunc(Math.random()*20)+1 // multriply by the biggest numebr you want to get, and add one to reach the biggest number, otherwise it stops at 19 (math.trunc) removes everything after comma.





//////////////////////////////////////////////////////////////
//scoping works only on way, from the deep to the biggest scope, not the other way.

function calcAge(birthyear) {
    const age = 2037 - birthyear;
    console.log(firstName);
  
    function printAge() {
      const output = `${firstName} you are ${age}, born in ${birthyear}`;
      console.log(output);
      if (birthyear >= 1981 && birthyear <= 1996) {
        const str = `Oh, and you are a millenial, ${firstName}`; //has acces to firstname since its global variable
        console.log(str); //is available only insidde this if statement, this applies to var and const variables. doenst work the same way on var.
      }
    }
    //console.log(output); will not be accessible since its in deeper scope
    printAge();
    return age;
  }
  //any function in a block scope is accessible only by this scope or deeper scope
  
  const firstName = 'Jonas';
  calcAge(1991);

  ///////////////////////////////////////


//////THIS THIS THIS THIS THIS THIS THIS THIS THIS ///////////////

console.log(this);

const calcAge = function (birthyear) {
  console.log(2037 - birthyear);
  console.log(this); //returns indefined, it gets its own this keywork which is just not defined
};
calcAge(1991);

const calcAgeArrow = birthyear => {
  console.log(2037 - birthyear);
  console.log(this); // returns window, which is the parent global scope, arrow function doesnt have its own this
};
calcAgeArrow(1980);

const jonas = {
  year: 1991,
  calcAge: function () {
    console.log(this); // will point to the object that is calling the method, so Jonas
    console.log(2037 - this.year);
  },
};
jonas.calcAge();

const matilda = {
  year: 2017,
};

matilda.calcAge = jonas.calcAge; // we borowed a method (calcAge (functions in objects are called method), so when we type matilda in console, we can see that she has a method calcage)
matilda.calcAge(); //now when previously method of jonas, is available in matilda, and when is called, this points to the object calling the moethod, so therefore it will point to mathilda. 


/////////////////////////////////////////

////////DATA STRUCTURE AND MODERN OPERATORS//////////////

const restaurant = {
  name: 'Classico Italiano',
  location: 'Via Angelo Tavanti 23, Firenze, Italy',
  categories: ['Italian', 'Pizzeria', 'Vegetarian', 'Organic'],
  starterMenu: ['Focaccia', 'Bruschetta', 'Garlic Bread', 'Caprese Salad'],
  mainMenu: ['Pizza', 'Pasta', 'Risotto'],

  order: function (starterIndex, mainIndex) {
    return [this.starterMenu[starterIndex], this.mainMenu[mainIndex]];
  },

  openingHours: {
    thu: {
      open: 12,
      close: 22,
    },
    fri: {
      open: 11,
      close: 23,
    },
    sat: {
      open: 0, // Open  24 hours
      close: 24,
    },
  },

  orderDelivery: function (
    { starterIndex = 1, mainIndex = 0, time = '20:00', address } //use curly braces in function arguments so it can destructure it, also we assign default values in case we cannot destructure.
  ) {
    console.log(
      this.starterMenu[starterIndex],
      this.mainMenu[mainIndex],
      time,
      address
    );
  },

  orderPasta: function (ing1, ing2, ing3){
    console.log(`here is your pasta with ${ing1},${ing2},${ing3} `)
  }

  orderPizza: function (mainIngridient, ...otherIngredients) {
    console.log(mainIngridient);
    console.log(otherIngredients);
  },
};

//destructuring dont forget to use const to declare variables
const arr = [2,3,4]
const [x,y,z] = arr 
console.log(x,y,z) ==> 2 3 4 

const [first,second] = restaurant.categories 
console.log(first ,/*space to skip*/ ,second) ==> Italian, vegeterian 

//using destructuring to switch places in an array 
[main, secondary] = [secondary, main]

//return 2 or more returns from one function : const [starter, mainCourse] = restaurant.order(2, 0);
const [starter, mainCourse] = restaurant.order(2, 0);
console.log(starter);
console.log(mainCourse);

//destructuring a nested array 
const nested = [2, 4, [5, 6]];
const [i, , [j, k]] = nested;
console.log(i, j, k);

//Default values //When a value is undefined (like the second position in the second array, default vlaues will be console loged)
const [p = 1, q = 1, r = 1] = [8, 9];
console.log(p, q, r); ==> 8 9 1


//destructuring objects
const { name, categories, openingHours } = restaurant;
console.log(name, openingHours, categories);

//renaming
const {
  name: restaurantName,
  categories: tags,
  openingHours: hours,
} = restaurant;
console.log(restaurantName, tags, hours);

//default values
const { menu = [], starterMenu: starters = [] } = restaurant;
console.log(menu, starters);

//mutating  variables
let a = 111;
let b = 999;
const obj = { a: 23, b: 7, c: 14 };

({ a, b } = obj);
console.log(a, b); // ==> 23 7

//nested objects
const {
  fri: { open: o, close: c }, //assigning o and c variable names to open and close nested objects
} = openingHours;
console.log(o, c);

//this object will be destructured by the oredrdelivery function, now 4 different arguments, but 1 argumenty separated into
restaurant.orderDelivery({
  time: '22:30',
  address: 'via del corso',
  mainIndex: 2,
  starterIndex: 2,
}); //order doesnt much the order in object, which is good
//==> Garlic Bread"Risotto""22:30""via del corso"

restaurant.orderDelivery({
  address : 'via del holla',
  starterIndex : 1
}) // ==> Bruschetta"Pizza""20:00""via del hola"





//Spread operator, allows to write comma separated values (arrays, functions...), works on iterables (arrays, strings, maps, sets, not objects)

const arr= [7,8,9]

const newArr = [1,2,...arr]
console.log(newArr) => [1,2,7,8,9]
console.log(...newArr) => 1 2 7 8 9 

const newMenu = [...restaurant.mainMenu, 'Gnocci' ]
console.log(newMenu) => [pizza, pasta,risotto, gnocci]

//spread operator takes all the values and doesnt create new variables. 

//copy array 
const mainMenuCopy = [...restaurant.mainMenu]

//join 2 arrays
const menu = [...restaurant.starterMenu, ...restaurant.mainMenu]

const str = 'Jonas'
const letters = [...str,' ', 'S.']
console.log(letters) ==> [J o n a s S.] //cannot add ...str into ${}

//real world example
const ingredients = [prompt("Let's make pasta! ing1",prompt("Let's make pasta! ing2"),prompt("Let's make pasta! ing3"))]

restaurant.orderPasta(...ingredients)==> inserts arguments separetly 

//Objects 
const newRestaurant = {foundingyear : 1998, ...restaurant, founder : "Guiseppe"}
//created a new object, that copier the initial restaurant and adds new values to it. 

const restaurantCopy = {...restaurant}
restaurantCopy.name = 'ristoeant roma'
console.log(restaurantCopy.name) ==> 'ristorant roma'
console.log(restaurant.name) ==> 'classico italiano'



//Rest Pattern and Parameters

//The rest operator, is written on the left of = sign
//The rest operator stores all values left in an array when destructuring

const [a, b, ...others] = [1, 2, 3, 4, 5]; //we create a new array called others
console.log(a, b, others);

const [pizza, , risotto, ...otherFood] = [
  ...restaurant.mainMenu,
  ...restaurant.starterMenu,
];
console.log(pizza, risotto, otherFood);

//Objects with rest operator
const { sat, ...weekdays } = restaurant.openingHours; //we put saturday in Sat, so the rest is thu and fri
console.log(weekdays); // ==> {thu: {open: 12, close: 22}, fri: {open: 11, close: 23}}
console.log(sat);

//functions  with rest operator
const add = function (...numbers) {
  console.log(numbers); // this syntax (...number) packs all the arguments into an array (called rest arguments)
  let sum = 0;
  for (let i = 0; i < numbers.length; i++) {
    sum += numbers[i];
  }
  console.log(sum);
};
add(2, 3);
add(5, 3, 7, 2);
add(8, 2, 5, 3, 1, 5, 1);

const x = [23, 5, 7];
add(...x); //the spread operator will spread the array into this function, and they will be collected into numbers array by the rest parameters.

//additional method for object restaurant : orderPizza: function (mainIngridient, ...otherIngredients ) {
    console.log(mainIngridient);
    console.log(otherIngredients);
  },


restaurant.orderPizza('mushrooms', 'onion', 'olives', 'spinach') ;



//Short circuiting && and ||
//Use any data type, return ANY data type, short circuiting

console.log('' || undefined || 0 || 'Jonas' || 23); //returns Jonas since the first values are falsy

restaurant.numGuests = 23;
const guests1 = restaurant.numGuests ? restaurant.numGuests : 10;
console.log(guests1); // guests = 23

const guests2 = restaurant.numGuests || 10;
console.log(guests2); //returns 23 since its a true value, othervise if numGuests didnt exist we would get 10, doesnt work if number of guests is 0, we can use it to set default values, see the next part to solve this

//AND Operator
console.log(0 && 'Jonas'); // returns 0, it returns the first falsy value found, if all operants are true returns the last truthy one, so Jonas

if (restaurant.orderPizza) {
  restaurant.orderPizza('mushrooms', 'spinach');
} // returns since restaurant.orderPizza exists

restaurant.orderPizza && restaurant.orderPizza('mushrooms', 'spinach'); //another way to call a ufnction, if orderPizza exists, the && operator will return the last truthy value, so it will execute code in the second operant if the first one is true.

//THE NULLISH COALESCING OPERATOR
restaurant.numGuests = 0;
const guests3 = restaurant.numGuests || 10;
console.log(guests3);

//Nullish : null and undefined (NOT 0 or '')
// ?? is same as || but in this case accepts 0 or '' as truthy values
const guests4 = restaurant.numGuests ?? 10;
console.log(guests4);



//Logical Assignment Operators

const rest1 = {
  name: 'Capri',
  numGuests: 0,
};

const rest2 = {
  name: 'La Piazza',
  owner: 'Giovanni Rossi',
};
//OR assignment  operator
//rest1.numberGuests = rest1.numGuests || 10;
//rest2.numberGuests = rest2.numGuests || 10;

rest1.numGuests ||= 10; //numGuests 10 since numGuests is 0
rest2.numGuests ||= 10; //numGuests 10 since numGuests is falsy bcs doesnt exist

//Nullish assignment operator
rest1.numGuests ??= 10; //numGuests 0 since numGuests is 0 and considered as truthy value
rest2.numGuests ??= 10; //numGuests 10 since numGuests is falsy bcs doesnt exist

//AND assignment operator
rest1.owner &&= 'ANONYMOUS'; //assigns a value to a variable if its truthy, so rest1.owner doenst exist, so no creation and no assigment
rest2.owner &&= 'ANONYMOUS'; // rest2.owner became ANONYMOUS since it exists







//Looping arrays: the for-of loop

const menu = [...restaurant.starterMenu, ...restaurant.mainMenu];

for (const item of menu) {
  console.log(item); //logs each item 1 by 1
}

for (const item of menu.entries()) {
  console.log(item); //returns item and its index in separate arrays
}
console.log([...menu.entries()]); //[Log] [[0, "Focaccia"], [1, "Bruschetta"], [2, "Garlic Bread"], [3, "Caprese Salad"], [4, "Pizza"], [5, "Pasta"], [6, "Risotto"]] (7) (script.js, line 62)



//Enhanced Object Literals

//ES6 Object literals
const hours1 = {
  thu: {
    open: 12,
    close: 22,
  },
  fri: {
    open: 11,
    close: 23,
  },
  sat: {
    open: 0, // Open 24 hours
    close: 24,
  },
};

//to add this object to another object it is enough just to write the following inside the object we want to insert it into
hours1, //instead of writing hours1 : hours1

//Methods in ES6
//we can write methods inside of objects without function and colons
orderPizza(mainIngridient, ...otherIngredients) {
  console.log(mainIngridient);
  console.log(otherIngredients);
},

//Compute property names
const weekdays = ['mon', 'tue' ,'wed', 'thu' ,'fri', 'sat','sun'  ];

const hours = {
  [weekdays[3]]: {
    open: 12,
    close: 22,
  },
  [weekdays[4]]: {
    open: 11,
    close: 23,
  },
  [`day-${2+4}`]: {
    open: 0, // Open 24 hours
    close: 24,
  },
};
//1. returns wed 
//2. returns thu
//3. returns "day-6"



//Optional chaining (?.)

//Without optional chaining
//console.log(restaurant.openingHours.mon.open); //error

//With optional chaining
console.log(restaurant.openingHours.mon?.open); //we check if mon exists, returns undefined
console.log(restaurant.openingHours?.mon?.open); //we check if openingHours and mon exists, returns undefined if dont exist

//Exmaple
const days = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun'];

for (const day of days) {
  console.log(day);
  const open = restaurant.openingHours[day]?.open ?? 'closed'; //using [day] since its not a real property name, we use ?? since one of the values is 0, so its considered as falsy by || operator
  console.log(`On ${day}, we open at ${open}`);
}

// Methods
console.log(restaurant.order?.(0, 1) ?? 'Method does not exist'); //if the method exists, it passes to (0,1) and trigers the method, if doenst exist returns Doesnt exist

//Arrays
const users = [{ name: 'Jonas', email: 'hello@jonas.io' }];

console.log(users[0]?.name ?? 'User array empty'); //check if users array [0] exists, than proceeds to .name 



//Looping Objects: Objects Keys, Values and Entries

//Property NAMES
const properties = Object.keys(openingHours);
console.log(properties); //["thu", "fri", "sat"]

//Property VALUES
const values = Object.values(openingHours);
console.log(values); //[{open: 12, close: 22}, {open: 11, close: 23}, {open: 0, close: 24}]

//Entries object
const entries = Object.entries(openingHours);
console.log(entries); //[["thu", {open: 12, close: 22}], ["fri", {open: 11, close: 23}], ["sat", {open: 0, close: 24}]]

//Example with destructuring
//the entries variable stores the openingHours composed of an array and a nested object (which we also destructure into open and close)
// [key, value], we could also replace key by any other name, since its already an array and not an object where you need to call the exact name
for (const [key, { open, close }] of entries) {
  console.log(`On ${key} we open at ${open} and close at ${close}`);
}
//On thu we open at 12 and close at 22
//On fri we open at 11 and close at 23
//On sat we open at 0 and close at 24


//EXERCISE EXAMPLE 2
const game = {
  team1: 'Bayern Munich',
  team2: 'Borrussia Dortmund',
  players: [
    [
      'Neuer',
      'Pavard',
      'Martinez',
      'Alaba',
      'Davies',
      'Kimmich',
      'Goretzka',
      'Coman',
      'Muller',
      'Gnarby',
      'Lewandowski',
    ],
    [
      'Burki',
      'Schulz',
      'Hummels',
      'Akanji',
      'Hakimi',
      'Weigl',
      'Witsel',
      'Hazard',
      'Brandt',
      'Sancho',
      'Gotze',
    ],
  ],
  score: '4:0',
  scored: ['Lewandowski', 'Gnarby', 'Lewandowski', 'Hummels'],
  date: 'Nov 9th, 2037',
  odds: {
    team1: 1.33,
    x: 3.25,
    team2: 6.5,
  },
};

//1.Loop over the game.scored array and print each player name to the console, along with the goal number (Example: "Goal 1: Lewandowski")
let i = 1;
for (const [i, player] of game.scored.entries()) {
  console.log(`Goal ${i + 1}: ${player}`);
}

//2.Use a loop to calculate the average odd and log it to the console (We already studied how to calculate averages, you can go check if you don't remember)
let avgSum = 0;

for (const odd of Object.values(game.odds)) {
  avgSum += odd;
}
console.log(avgSum / Object.values(game.odds).length);

//3.Print the 3 odds to the console, but in a nice formatted way, exactly like this:Odd of victory Bayern Munich: 1.33 Odd of draw: 3.25 Odd of victory Borrussia Dortmund: 6.5 Get the team names directly from the game object, don't hardcode them (except for "draw").

for (const [team, odd] of Object.entries(game.odds)) {
  const teamStr = team === 'x' ? 'Draw' : `victory ${game[team]}`; //dont forget to use [] when using a variable storing the name of the property

  console.log(`Odd of ${teamStr} ${odd}`);
}

//4. Bonus: Create an object called 'scorers' which contains the names of the players who scored as properties, and the number of goals as the value.
const scorers = {};
for (const player of game.scored) {
  scorers[player] ? scorers[player]++ : (scorers[player] = 1);
}

console.log(scorers);
//END OF EXERCISE




//SETS
//A collection of unique values (no duplicates)

const orderSet = new Set([
  'Pasta',
  'Pizza',
  'Pizza',
  'Risotto',
  'Pasta',
  'Pizza',
]);

console.log(orderSet); //Set {"Pasta", "Pizza", "Risotto"}
console.log(new Set('Jonas')); //Set {"J", "o", "n", "a", "s"}
console.log(orderSet.size); //3
console.log(orderSet.has('Pizza')); // True or False

orderSet.add('Garlic Bread'); //Adding a value to the set
orderSet.delete('Pizza'); //Removing a value from the set
orderSet.clear(); //Removes all values form the set

for (const order of orderSet) console.log(order); //retreive values from

//Example real world usage
const staff = ['Waiter', 'Chef', 'Waiter', 'Manager', 'Chef', 'Waiter'];

const staffUnique = [...new Set(staff)];
console.log(staffUnique); //returns an array since we used the spread operator that turns every iterable into an array
//["Waiter", "Chef", "Manager"]

console.log(new Set('jonasschmedtman').size); //11




//MAPS FUNDAMENTALS
//Maps are similar to objects, but the keys can be anything, objects, other maps, strings, int, etc

const rest = new Map();
rest.set('name', 'Classico Italiano');
rest.set(1, ' Firenze Italy');
console.log(rest.set(2, 'Lisbon, Portugal')); //Map {"name" => "Classico Italiano", 1 => " Firenze Italy", 2 => "Lisbon, Portugal"}

//we can call set multiple times since set() returns a Map
rest
  .set('categories', ['Italian', 'Pizzeria', 'Vegetarian', 'Organic'])
  .set('open', 11)
  .set('close', 23)
  .set(true, 'We are open')
  .set(false, 'We are closed');

console.log(rest.get('name')); //Classico Italiano

//Example of using true/false keys
const time = 21;
console.log(rest.get(time > rest.get('open') && time < rest.get('close'))); //We are open

console.log(rest.has('categories')); //true
console.log(rest.delete(2)); //deletes property from Map
console.log(rest.size); //7 (bcs 7 items)
rest.clear(); //clears the Map

//Array as a key
rest.set([1, 2], 'Test');
console.log(rest.get([1, 2])); //doesnt work since both [1,2] are different arrays in the HEAP, to solve this :
const arr = [1, 2];
rest.set(arr, 'Test');
console.log(rest.get(arr)); //Test

//DOM element as a key and assigning value to it
rest.set(document.querySelector('h1'), 'Heading');
console.log(rest);




//MAPS ITERATION

const question = new Map([
  ['question', 'What is the best programming language in the world?'],
  [1, 'C'],
  [2, 'Java'],
  [3, 'JavaScript'],
  ['correct', 3],
  [true, 'Correct 🎉'],
  [false, 'Try again!'],
]);
console.log(question);

//Convert object to map
const hoursMap = new Map(Object.entries(openingHours));
console.log(hoursMap);

//Quiz app
console.log(question.get('question'));
for (const [key, values] of question) {
  if (typeof key === 'number') console.log(`Answer ${key}: ${values}`);
}
const answer = Number(prompt('Your answer'));
console.log(question.get(question.get('correct') === answer));

//Convert a Map to Array
[...question]; //[["question", "What is the best programming language in the world?"], [1, "C"], [2, "Java"], [3, "JavaScript"], ["correct", 3], [true, "Correct 🎉"], [false, "Try again!"]]

[...question.keys()]//returns an array with keys
[...question.values()]//returns an array with values


//EXERCISE 3 

const gameEvents = new Map([
  [17, '⚽ GOAL'],
  [36, '🔁 Substitution'],
  [47, '⚽ GOAL'],
  [61, '🔁 Substitution'],
  [64, '🔶 Yellow card'],
  [69, '🔴 Red card'],
  [70, '🔁 Substitution'],
  [72, '🔁 Substitution'],
  [76, '⚽ GOAL'],
  [80, '⚽ GOAL'],
  [92, '🔶 Yellow card'],
]);

//1.
const events = [...new Set(gameEvents.values())];
console.log(events);

//2.
gameEvents.delete(64);
console.log(gameEvents);

//3.

const time = Math.max(...gameEvents.keys()); //can also use .pop() but need an array

console.log(time);

console.log(
  `An event happened, on average, every ${time / gameEvents.size} minutes`
);

//4.
for (const [key, value] of gameEvents) {
  let half = key <= 45 ? 'FIRST HALF' : 'SECOND HALF';
  console.log(`[${half}] ${key}: ${value}`);
}
//END OF EXERCISE 3 




//WORKING WITH STRINGS PART 1

const airline = 'TAP Air Portugal';
const plane = 'A320';

console.log(plane[0]); //returns the letter at index 0
console.log(airline.length); //returns the length of str
console.log(airline.indexOf('r')); //returns the index of r
console.log(airline.lastIndexOf('r')); //resturns the index of the last r
console.log(airline.indexOf('Air')); //retuns -1 if not found, otherwise the index of first char
console.log(airline.slice(4)); //starts extracting at index 4
console.log(airline.slice(4, 7)); //starts extracting at index 4 and stops at 7

console.log(airline.slice(-2)); //starts extracting from the end
console.log(airline.slice(1, -5)); //starts at index 1 but cuts the last 5 characters.

const checkkMiddleSeat = function (seat) {
  //B and E are middle seats

  if (seat.slice(-1) === 'B' || seat.slice(-1) === 'E') {
    console.log(seat);
    console.log('Middle seat');
  }
};
checkkMiddleSeat('11B');
checkkMiddleSeat('23C');
checkkMiddleSeat('3E');

//WORKING WITH STRINGS PART 2
console.log(airline.toLowerCase()); //converts to lowercase
console.log(airline.toUpperCase()); //converts to uppercase

//Fix capitalization in name
const passenger = 'jOnAs';
const passengerLover = passenger.toLowerCase();
const passengerCorrect =
  passengerLover[0].toUpperCase() + passengerLover.slice(1);
console.log(passengerCorrect);

//comaprins emails
const email = 'hello@gmail.com';
const loginEmail = '  Hello@GmAIl.coM \n';
const normalEmail = loginEmail.toLowerCase().trim(); //first lowerecased than TRIM() removes white spaces and \n
console.log(normalEmail); //hello@gmail.com

//replacing
const priceGB = '288,97£';
const priceUS = priceGB.replace('£', '$').replace(',', '.'); //replace() replaces the first occurence that match the parameters
console.log(priceUS); //288.97$

const test = 'heloo heloo world';
console.log(test.replaceAll('heloo', 'hello')); //replaces all vlaues that match

console.log(test.replaceAll(/heloo/g, 'hello')); //replaces all vlaues that match (better to use replaceALL())

//Booleans
const plane2 = 'Airbus A320neo';
console.log(plane2.includes('A320')); //true or false if includes the vlaue in str
console.log(plane2.startsWith('Airb')); //true or false if the first characters match the parameters
console.log(plane2.endsWith('20neo')); // true or false if the last characters match the parameters

//WORKING WITH STRINGS PART 3

//Split and Join
console.log('a+very+nice+string'.split('+')); //Split a string into substrings using the specified separator and return them as an array. ["a", "very", "nice", "string"]
const [firstName, lastName] = 'Bogdan Dmytrenko'.split(' '); //very useful, you can destructure directly to firstname and lastname since it returns an array
console.log(firstName, lastName);

const newName = ['Mr.', firstName, lastName.toUpperCase()].join(' '); //Adds all the elements of an array into a string, separated by the specified separator string.
console.log(newName); // Mr. Bogdan DMYTRENKO

const capitalizeName = function (name) {
  const names = name.split(' ');
  const namesUpper = [];
  for (const n of names) {
    namesUpper.push(n[0].toUpperCase() + n.slice(1));
  } // push() adds an element to the array
  console.log(namesUpper);
};

capitalizeName('jessice ain smith davis');

//Padding
const message = 'Go to gate 23!';
console.log(message.padStart(25, '+')); //Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length. The padding is applied from the start (left) of the current string
//+++++++++++Go to gate 23!

console.log(message.padEnd(25, '+')); //The padding is applied from the end (right) of the current string. //Go to gate 23!+++++++++++

//Application of padding
const maskCreditCard = function (number) {
  const str = number + ''; //the same as String(number) converts the int to string
  const last = str.slice(-4);
  return last.padStart(str.length, '*');
};

console.log(maskCreditCard(1234123412342344));
console.log(maskCreditCard('458769834098409234234283'));

//Repeat
const message2 = 'Bad weather... All departurs Delayed... ';
console.log(message2.repeat(5));

const planesInLine = function (n) {
  console.log(`There are ${n} planes in line ${'🛩'.repeat(n)}`);
};
planesInLine(5);
planesInLine(3);
planesInLine(12);

//Concat
const str1 = 'Hello';
const str2 = 'World';

console.log(str1.concat(' ', str2)); //Returns a string that contains the concatenation of two or more strings. ==>"Hello World"


//Final stirng exercise

document.body.append(document.createElement('textarea'));
document.body.append(document.createElement('button'));

document.querySelector('button').addEventListener('click', function () {
  const text = document.querySelector('textarea').value;
  const rows = text.split('\n');

  for (const [i, row] of rows.entries()) {
    const [first, second] = row.toLowerCase().trim().split('_');

    const output = `${first}${second.replace(
      second[0],
      second[0].toUpperCase()
    )}`;
    console.log(`${output.padEnd(20)}${'✅'.repeat(i + 1)}`);
  }
});

//END OF EXERCISE

//BONUS EXERCISE 

// Data needed for a later exercise
const flights =
  '_Delayed_Departure;fao93766109;txl2133758440;11:25+_Arrival;bru0943384722;fao93766109;11:45+_Delayed_Arrival;hel7439299980;fao93766109;12:05+_Departure;fao93766109;lis2323639855;12:30';

for (const flight of flights.split('+')) {
  const [type, from, to, time] = flight.split(';');

  const output = `${type.startsWith('_Delayed') ? '🛑' : ''}${type.replaceAll(
    '_',
    ' '
  )} from: ${from.slice(0, 3).toUpperCase()} to: ${to
    .slice(0, 3)
    .toUpperCase()} (${time.replace(':', 'h')})`.padStart(50);

  console.log(output);
}
//END OF BONUS EXERCISE




