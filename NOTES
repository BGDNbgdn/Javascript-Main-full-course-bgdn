console.log(typeof true);
// Gives the type of a variable


firstname = "Bogdan";
const jonasnew = `I'm ${firstname}, i am 20 yo`;
// Use `` saves time, no need to use operators for strings, and dont bother with spaces. 

\n\ to skip to the next line or just use `` and enter


/* 5 falsy values : 0, '', undefined, null, NaN +(false) all of them become false when converted to boolean. Any other value will be ocnverted to true.
For example 
const money = 0 
if (money){
    console.log('hello')
} else {
    console.log('this will be console logged since money = 0 = false')
}
*/

/* loose equality operator '18' == 18 will return true, while '18' === 18 returns false 
const favourite = Number(prompt("what's your fav number ? "));

console.log(favourite);
console.log(typeof favourite);

if (favourite === 23) {
	console.log("cool 23 is great");
}


!== operator for not equal
 */


//Logic operators : 
&& for AND 
|| for OR
! for Opposit


//THE SWITCH STATEMENT,  allows to write faster than if,  else if, else...

const day = 'monday'

switch(day){
    case 'monday':
        console.log('this will print out if monday, use break otherwise it will just go on and on')
        break
    case 'tuesday':
    case 'wednesday':
        console.log('this will printout if tuesday or wednesday')
    case 'thursday....'
}

//CONDITIONAL (TERNARY) OPERATOR
const age = 23
const drink = age >= 18 ? 'wine' : 'water'

console.log(I like to drink ${age >= 18 ? 'wine' : 'water'})


// to avoid hidden erors write this on the first line of every js file 
'use strict'



//////FUNCTIONS FUNCTIONS FUNCTIONS FUNCTIONS FUNCTIONS FUNCTIONS FUNCTIONS FUNCTIONS//////

//CREATE A FUNCTION (this way you can call this function even before declaring it)
function logger(name) {
	return `Hello ${name}`;
}
const sentence = logger("Bogdan");
console.log(sentence);

//FUNCTION EXPRESSION (need to store it in variable since it produce a value) (cannont call it before defining it)
const calcAge = function (birthyear) {
    return 2037 - birthyear;
}
const age = calcAge(1991);
console.log(age);

//ARROW FUNCTION (also expression function), (use parantheses for multiple parameters)
const calcage2 = birthyear => 2037 - birthyear;
const age2 = calcage2(1991)
console.log(age2)

// 3 types tgether 


function calcAge(birthyear){
    return 2037 - birthyear;
}


 const calcAge = function (birthyear){
    return 2037 - birthyear;
 }


 const calcAge = birthyear => 2037 - birthyear;



////// ARRAYS ARRAYS ARRAYS ARRAYS ARRAYS ARRAYS ARRAYS ARRAYS ARRAYS ARRAYS ARRAYS ARRAYS //////

const numbers = [1,2,3,4] 

const years = new Array(1,2,3,4); //creation of new array using function

const length = years.length // get the length of an array

//ARRAY METHODS

years.push(2024)  // adds an element to the array 
years.unshift(1995) // adds an element at the beggining of the array
years.pop() // removes the last element of an array
years.shift() // removes the first element of an array

years.indexOf(2024) // returns the index of the searched element, if not, returns -1 

years.includes(2024) // returns a bollean value 


//////OBJECTS OBJECTS OBJECTS OBJECTS OBJECTS OBJECTS OBJECTS OBJECTS OBJECTS OBJECTS //////

const jonas = {
    firstname : 'jonas'
    lastname : 'shemd'
    age : 2037-1991
    job : 'teacher'
}

jonas.lastname //returns shemd, the value of the key
jonas['lastname'] // returns shemd, but to be used in functions since you can insert into [  ]  for example :
const nameKey = 'Name'
console.log(jonas['first'+nameKey])

jonas.location = 'Portugal'; // adding new keys/values to the object
jonas['location2'] = 'France'; // adding new keys/values to the object



const jonas = {
    firstname : 'Jonas',
    lastname : 'Shmed',
    calcAge : function (birthyear){
        return 2037-birthyear
    }
};
console.log(jonas.calcAge(1991)); // dot method
console.log(jonas["calcAge"](1991)); //bracket method

//in the next example we use this that references the object itself 
const jonas = {
    firstname : 'Jonas',
    lastname : 'Shmed',
    birthyear : '1991',
    calcAge : function (){
        console.log(this) // just to see the objec, no need to write
        return 2037 - this.birthyear //this applies to jonas object  === this
    }
};
console.log(jonas.calcAge()); 

//here we will store the result of a function inside of a keyword age
const jonas = {
    firstname : 'Jonas',
    lastname : 'Shmed',
    birthyear : '1991',

    calcAge : function (){ // function that calculates the age
        
        this.age =  2037 - this.birthyear //calculating the age and storing it in this.age
        
        return this.age
    }
};
console.log(jonas.calcAge()); // when we call the function, the keyword age is created with its value, otherwise it doenst exist



//////LOOPS LOOPS LOOPS LOOPS LOOPS LOOPS LOOPS LOOPS LOOPS LOOPS //////

//FOR LOOP 

//loop that goes from 1 to 10
for (let rep = 1; rep <= 10; rep++) {
	console.log(rep);
} 

for(let i = 0 ; i < years.length ;i++) // tip : no need to use -1 since we use smaller operator

//CONTINUE

for (let rep = 1; rep <= 10; rep++) {
	if (rep === 3) continue;
	console.log(rep);
}

//BREAK
for (let rep = 1; rep <= 10; rep++) {
	if (rep === 3) break;
	console.log(rep);
}

//LOOPING BACKWARDS

for (let i = myarray.length - 1; i>=0; i--){
    console.log(i)
}

//WHILE LOOP

let rep = 1 //should create it outside and before the loop
while (rep <= 10){
    console.log(rep);
}





// DEBUGGING TOOLS 

console.log(measurement.value);
console.warn(measurement.value); //yellow in console
console.error(measurement.value); //red in console

// to use the debugger, go to browser, inspect element, and sources, use break points

debugger; // creates a break point in the script 






//// DOM MANIPULATION



document.querySelector('.message').textContent = ' Hello' // select a query, more precisely its text content and modify it

document.querySelector('.guess').value = 10; // to access a person inseted value

document.querySelector('.check').addEventListener('click', function () {
    console.log(document.querySelector('.guess').value);
  }); // we select an elen=ment (check button), and add an event listener to it, the click event. and we created an event handler (the function). When the button is clicked the function takes the vlaue from the .guess claass field
  
  document.querySelector('body').style.backgroundColor = '#60b347' //we select the stlye (CSS) of the body element .backColor is the attribute in CSS (use camelCase when you see a -)

// replace a query with a function 
  document.querySelector('.message').textContent = ' No number'; //this is the basic code

  const displayMessage = function (message) {
    document.querySelector('.message').textContent = message;
  }; //but we can make a function that takes as argument the value to display for example

displayMessage('No number'); // so when called it will display No number

 // use querySelectorALL to select all isntances of a class, otherwise the code selects only the first instance, we can even iterate this one. USE THIS TO ADD EVENT LISTENERS TO QUELRYSELECTOR ALL
const btnsOpenModal = document.querySelectorAll('.show-modal');

for (let i = 0; i < btnsOpenModal.length; i++)
  btnsOpenModal[i].addEventListener('click', function () {
    console.log('button clicked');
  });


//
btnsOpenModal.classList.remove('hidden') //classList (lets add remove etc classes) !!!! no need to use . before the class, the . is used only to select

player0El.classList.toggle('player--active'); //.toggle turns on.off a class from the classList of an element

diceEl.src = `dice-${dice}.png`; // .src access the source of a query in html, we can set it to smth else., you can use ${} to insert different values into the link to the source




const closeModal = function () {
    modal.classList.add('hidden');
    overlay.classList.add('hidden');
  };
  
  btnCloseModal.addEventListener('click', closeModal); // we used closeModal without () because this lets js know that we want to execute it only once the button is clicked, using () directly will just call the function directly



  document.addEventListener('keydown', function (e) {
    if (e.key === 'Escape') {
      if (!modal.classList.contains('hidden')) {
        closeModal();
      }
    }
// when using keydown or any other key related event, the function(e) will return the key pressed class, use .key to get the key.

const score0 = document.querySelector('#score--0') // you can select an id with the basic query selector
const score1 = document.getElementById('score--1') //but you can also use selector by id which is faster 


//SEE 07-PIG-GAME STARTER JS CODE, a lot of good logic



//MATH RANDOM
const number = Math.trunc(Math.random()*20)+1 // multriply by the biggest numebr you want to get, and add one to reach the biggest number, otherwise it stops at 19 (math.trunc) removes everything after comma.





//////////////////////////////////////////////////////////////
//scoping works only on way, from the deep to the biggest scope, not the other way.

function calcAge(birthyear) {
    const age = 2037 - birthyear;
    console.log(firstName);
  
    function printAge() {
      const output = `${firstName} you are ${age}, born in ${birthyear}`;
      console.log(output);
      if (birthyear >= 1981 && birthyear <= 1996) {
        const str = `Oh, and you are a millenial, ${firstName}`; //has acces to firstname since its global variable
        console.log(str); //is available only insidde this if statement, this applies to var and const variables. doenst work the same way on var.
      }
    }
    //console.log(output); will not be accessible since its in deeper scope
    printAge();
    return age;
  }
  //any function in a block scope is accessible only by this scope or deeper scope
  
  const firstName = 'Jonas';
  calcAge(1991);

  ///////////////////////////////////////


//////THIS THIS THIS THIS THIS THIS THIS THIS THIS ///////////////

console.log(this);

const calcAge = function (birthyear) {
  console.log(2037 - birthyear);
  console.log(this); //returns indefined, it gets its own this keywork which is just not defined
};
calcAge(1991);

const calcAgeArrow = birthyear => {
  console.log(2037 - birthyear);
  console.log(this); // returns window, which is the parent global scope, arrow function doesnt have its own this
};
calcAgeArrow(1980);

const jonas = {
  year: 1991,
  calcAge: function () {
    console.log(this); // will point to the object that is calling the method, so Jonas
    console.log(2037 - this.year);
  },
};
jonas.calcAge();

const matilda = {
  year: 2017,
};

matilda.calcAge = jonas.calcAge; // we borowed a method (calcAge (functions in objects are called method), so when we type matilda in console, we can see that she has a method calcage)
matilda.calcAge(); //now when previously method of jonas, is available in matilda, and when is called, this points to the object calling the moethod, so therefore it will point to mathilda. 


/////////////////////////////////////////

////////DATA STRUCTURE AND MODERN OPERATORS//////////////

const restaurant = {
  name: 'Classico Italiano',
  location: 'Via Angelo Tavanti 23, Firenze, Italy',
  categories: ['Italian', 'Pizzeria', 'Vegetarian', 'Organic'],
  starterMenu: ['Focaccia', 'Bruschetta', 'Garlic Bread', 'Caprese Salad'],
  mainMenu: ['Pizza', 'Pasta', 'Risotto'],

  order: function (starterIndex, mainIndex) {
    return [this.starterMenu[starterIndex], this.mainMenu[mainIndex]];
  },

  openingHours: {
    thu: {
      open: 12,
      close: 22,
    },
    fri: {
      open: 11,
      close: 23,
    },
    sat: {
      open: 0, // Open  24 hours
      close: 24,
    },
  },

  orderDelivery: function (
    { starterIndex = 1, mainIndex = 0, time = '20:00', address } //use curly braces in function arguments so it can destructure it, also we assign default values in case we cannot destructure.
  ) {
    console.log(
      this.starterMenu[starterIndex],
      this.mainMenu[mainIndex],
      time,
      address
    );
  },

  orderPasta: function (ing1, ing2, ing3){
    console.log(`here is your pasta with ${ing1},${ing2},${ing3} `)
  }
};

//destructuring dont forget to use const to declare variables
const arr = [2,3,4]
const [x,y,z] = arr 
console.log(x,y,z) ==> 2 3 4 

const [first,second] = restaurant.categories 
console.log(first ,/*space to skip*/ ,second) ==> Italian, vegeterian 

//using destructuring to switch places in an array 
[main, secondary] = [secondary, main]

//return 2 or more returns from one function : const [starter, mainCourse] = restaurant.order(2, 0);
const [starter, mainCourse] = restaurant.order(2, 0);
console.log(starter);
console.log(mainCourse);

//destructuring a nested array 
const nested = [2, 4, [5, 6]];
const [i, , [j, k]] = nested;
console.log(i, j, k);

//Default values //When a value is undefined (like the second position in the second array, default vlaues will be console loged)
const [p = 1, q = 1, r = 1] = [8, 9];
console.log(p, q, r); ==> 8 9 1


//destructuring objects
const { name, categories, openingHours } = restaurant;
console.log(name, openingHours, categories);

//renaming
const {
  name: restaurantName,
  categories: tags,
  openingHours: hours,
} = restaurant;
console.log(restaurantName, tags, hours);

//default values
const { menu = [], starterMenu: starters = [] } = restaurant;
console.log(menu, starters);

//mutating  variables
let a = 111;
let b = 999;
const obj = { a: 23, b: 7, c: 14 };

({ a, b } = obj);
console.log(a, b); // ==> 23 7

//nested objects
const {
  fri: { open: o, close: c }, //assigning o and c variable names to open and close nested objects
} = openingHours;
console.log(o, c);

//this object will be destructured by the oredrdelivery function, now 4 different arguments, but 1 argumenty separated into
restaurant.orderDelivery({
  time: '22:30',
  address: 'via del corso',
  mainIndex: 2,
  starterIndex: 2,
}); //order doesnt much the order in object, which is good
//==> Garlic Bread"Risotto""22:30""via del corso"

restaurant.orderDelivery({
  address : 'via del holla',
  starterIndex : 1
}) // ==> Bruschetta"Pizza""20:00""via del hola"





//Spread operator, allows to write comma separated values (arrays, functions...), works on iterables (arrays, strings, maps, sets, not objects)

const arr= [7,8,9]

const newArr = [1,2,...arr]
console.log(newArr) => [1,2,7,8,9]
console.log(...newArr) => 1 2 7 8 9 

const newMenu = [...restaurant.mainMenu, 'Gnocci' ]
console.log(newMenu) => [pizza, pasta,risotto, gnocci]

//spread operator takes all the values and doesnt create new variables. 

//copy array 
const mainMenuCopy = [...restaurant.mainMenu]

//join 2 arrays
const menu = [...restaurant.starterMenu, ...restaurant.mainMenu]

const str = 'Jonas'
const letters = [...str,' ', 'S.']
console.log(letters) ==> [J o n a s S.] //cannot add ...str into ${}

//real world example
const ingredients = [prompt("Let's make pasta! ing1",prompt("Let's make pasta! ing2"),prompt("Let's make pasta! ing3"))]

restaurant.orderPasta(...ingredients)==> inserts arguments separetly 

//Objects 
const newRestaurant = {foundingyear : 1998, ...restaurant, founder : "Guiseppe"}
//created a new object, that copier the initial restaurant and adds new values to it. 

const restaurantCopy = {...restaurant}
restaurantCopy.name = 'ristoeant roma'
console.log(restaurantCopy.name) ==> 'ristorant roma'
console.log(restaurant.name) ==> 'classico italiano'